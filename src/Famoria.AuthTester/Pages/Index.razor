@page "/"
@using Microsoft.JSInterop
@using System.Text.Json
@implements IAsyncDisposable

<div class="container">
    <h1>Google Sign-In Tester</h1>

    <div class="auth-status">
        @if (_isLoading)
        {
            <p>Loading...</p>
        }
        else if (!string.IsNullOrEmpty(_error))
        {
            <p class="error">@_error</p>
        }
        else if (!string.IsNullOrEmpty(_token))
        {
            <p class="success">Successfully signed in!</p>
            <p>Email: @_email</p>
            <p>Token: @_token</p>
        }
    </div>

    <button class="signin-button" @onclick="StartSignIn" disabled="@_isLoading">
        Sign in with Google
    </button>
</div>

@code {
    private string? _token;
    private string? _email;
    private string? _error;
    private bool _isLoading;
    private IJSObjectReference? _popup;
    private DotNetObjectReference<Index>? _objRef;

    protected override void OnInitialized()
    {
        _objRef = DotNetObjectReference.Create(this);
    }

    private async Task StartSignIn()
    {
        try
        {
            _isLoading = true;
            _error = null;
            _token = null;
            _email = null;
            StateHasChanged();

            // Generate a unique state parameter
            var state = Guid.NewGuid().ToString();
            var url = $"https://localhost:7001/auth/signin/google?state={state}";
            
            // Open popup with specific features
            var features = "width=500,height=600,resizable=yes,status=yes,scrollbars=yes,location=yes";
            _popup = await JS.InvokeAsync<IJSObjectReference>("open", url, "google-signin", features);
            
            // Store state in session storage
            await JS.InvokeVoidAsync("sessionStorage.setItem", "oauth_state", state);
            
            await JS.InvokeVoidAsync("window.addEventListener", "message", _objRef, nameof(OnMessage));
            await StartPopupCheck();
        }
        catch (Exception ex)
        {
            _error = $"Error: {ex.Message}";
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task StartPopupCheck()
    {
        for (int i = 0; i < 120; i++) // 2 minute timeout
        {
            await Task.Delay(1000);
            
            try
            {
                var closed = await JS.InvokeAsync<bool>("popupIsClosed", _popup);
                if (closed && string.IsNullOrEmpty(_token))
                {
                    _error = "Sign-in was cancelled or timed out.";
                    _isLoading = false;
                    StateHasChanged();
                    break;
                }
            }
            catch
            {
                if (string.IsNullOrEmpty(_token))
                {
                    _error = "Sign-in window was closed.";
                    _isLoading = false;
                    StateHasChanged();
                }
                break;
            }
        }
    }

    [JSInvokable]
    public async Task OnMessage(JsonElement element)
    {
        try
        {
            if (element.TryGetProperty("token", out var tokenElement))
            {
                _token = tokenElement.GetString();
                if (element.TryGetProperty("email", out var emailElement))
                {
                    _email = emailElement.GetString();
                }
                await JS.InvokeVoidAsync("sessionStorage.setItem", "token", _token);
            }
            else if (element.TryGetProperty("error", out var errorElement))
            {
                _error = errorElement.GetString();
            }

            _isLoading = false;
            await JS.InvokeVoidAsync("window.removeEventListener", "message", _objRef, nameof(OnMessage));
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _error = $"Error processing response: {ex.Message}";
            _isLoading = false;
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_objRef != null)
        {
            try
            {
                await JS.InvokeVoidAsync("window.removeEventListener", "message", _objRef, nameof(OnMessage));
            }
            catch { }
            _objRef.Dispose();
        }
    }

    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private IJSRuntime JS { get; set; } = default!;
}

<style>
    .container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        text-align: center;
    }

    .auth-status {
        margin: 20px 0;
        padding: 15px;
        border-radius: 4px;
        background-color: #f8f9fa;
    }

    .error {
        color: #dc3545;
    }

    .success {
        color: #28a745;
    }

    .signin-button {
        background-color: #4285f4;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.2s;
    }

    .signin-button:hover {
        background-color: #357abd;
    }

    .signin-button:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
    }
</style>
